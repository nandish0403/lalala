import React, { useState, useEffect, useRef, useCallback } from 'react';
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
import { Dialog, DialogContent, DialogTitle } from '@radix-ui/react-dialog';
import * as VisuallyHidden from '@radix-ui/react-visually-hidden';

// A single-file, futuristic UI for the SecureWave security system.
// This application simulates the system's core features, including:
// - A 3D, traversable floor plan with heatmap visualization.
// - A "See-Through Detection" threat simulation.
// - A "Multi-factor Secure Control" authentication flow.
// - An "Always-On Resilience" status display.

// Main App component for the SecureWave UI
const App = () => {
  const mountRef = useRef(null);
  const sceneRef = useRef(null);
  const [threatPosition, setThreatPosition] = useState(null);
  const [systemArmed, setSystemArmed] = useState(false);
  const [authStep, setAuthStep] = useState(0); // 0: closed, 1: key, 2: rfid, 3: fingerprint
  const [batteryLevel, setBatteryLevel] = useState(100);
  const [networkStatus, setNetworkStatus] = useState('Online');
  const [activeSensors, setActiveSensors] = useState(24);
  const [members, setMembers] = useState(['John Doe', 'Jane Smith', 'Alice Johnson']);
  const [newMemberName, setNewMemberName] = useState('');
  const threatHeatmapRef = useRef(null);

  const raycaster = useRef(new THREE.Raycaster());
  const mouse = useRef(new THREE.Vector2());
  const floorPlane = useRef(new THREE.Plane(new THREE.Vector3(0, 1, 0), 0));

  // Initialize and manage the 3D scene
  useEffect(() => {
    const mount = mountRef.current;
    if (!mount) return;

    // Scene setup
    const scene = new THREE.Scene();
    sceneRef.current = scene;
    scene.background = new THREE.Color(0x0a0a0a); // Dark background

    // Camera
    const camera = new THREE.PerspectiveCamera(75, mount.clientWidth / mount.clientHeight, 0.1, 1000);
    camera.position.set(0, 20, 25);

    // Renderer
    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(mount.clientWidth, mount.clientHeight);
    mount.appendChild(renderer.domElement);

    // Grid for the floor
    const gridHelper = new THREE.GridHelper(30, 30, 0x1a1a1a, 0x1a1a1a);
    scene.add(gridHelper);

    // House floor plan (simple boxes for rooms and walls)
    const houseGroup = new THREE.Group();
    const wallMaterial = new THREE.MeshPhongMaterial({ color: 0x1c1c1c, shininess: 10, transparent: true, opacity: 0.8 });
    const wallHeight = 5;

    // Walls
    const walls = [
      new THREE.Vector3(0, 2.5, -15), new THREE.Vector3(30, wallHeight, 1),
      new THREE.Vector3(15, 2.5, 0), new THREE.Vector3(1, wallHeight, 30),
      new THREE.Vector3(-15, 2.5, 0), new THREE.Vector3(1, wallHeight, 30),
      new THREE.Vector3(0, 2.5, 15), new THREE.Vector3(30, wallHeight, 1),
      new THREE.Vector3(-5, 2.5, -5), new THREE.Vector3(1, wallHeight, 20),
      new THREE.Vector3(5, 2.5, -5), new THREE.Vector3(1, wallHeight, 20),
      new THREE.Vector3(0, 2.5, 5), new THREE.Vector3(10, wallHeight, 1)
    ];

    for (let i = 0; i < walls.length; i += 2) {
      const wallGeometry = new THREE.BoxGeometry(walls[i+1].x, walls[i+1].y, walls[i+1].z);
      const wallMesh = new THREE.Mesh(wallGeometry, wallMaterial);
      wallMesh.position.copy(walls[i]);
      houseGroup.add(wallMesh);
    }
    scene.add(houseGroup);

    // Lighting
    const ambientLight = new THREE.AmbientLight(0x404040, 5);
    scene.add(ambientLight);
    const pointLight = new THREE.PointLight(0xffffff, 5, 100);
    pointLight.position.set(10, 20, 10);
    scene.add(pointLight);

    // OrbitControls
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;
    controls.screenSpacePanning = false;
    controls.minDistance = 10;
    controls.maxDistance = 50;

    // Animation loop
    const animate = () => {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
      if (threatHeatmapRef.current) {
        threatHeatmapRef.current.scale.x = threatHeatmapRef.current.scale.y = threatHeatmapRef.current.scale.z = 1 + Math.sin(Date.now() * 0.005) * 0.1;
      }
    };
    animate();

    // Handle window resize
    const handleResize = () => {
      camera.aspect = mount.clientWidth / mount.clientHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(mount.clientWidth, mount.clientHeight);
    };
    window.addEventListener('resize', handleResize);

    // Handle clicks on the canvas to place a threat
    const onCanvasClick = (event) => {
      if (!systemArmed) return;

      const rect = mount.getBoundingClientRect();
      mouse.current.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
      mouse.current.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;

      raycaster.current.setFromCamera(mouse.current, camera);
      const intersects = raycaster.current.ray.intersectPlane(floorPlane.current, new THREE.Vector3());

      if (intersects) {
        setThreatPosition({ x: intersects.x, y: 0.5, z: intersects.z });
      }
    };
    mount.addEventListener('click', onCanvasClick);

    return () => {
      mount.removeChild(renderer.domElement);
      window.removeEventListener('resize', handleResize);
      mount.removeEventListener('click', onCanvasClick);
    };
  }, [systemArmed]);

  // Update threat heatmap position with a human-like figure
  useEffect(() => {
    const scene = sceneRef.current;
    if (!scene) return;

    // Remove old heatmap if it exists
    if (threatHeatmapRef.current) {
      scene.remove(threatHeatmapRef.current);
      threatHeatmapRef.current = null;
    }

    if (threatPosition) {
      // Create a simple human-like figure from basic geometries
      const threatFigure = new THREE.Group();
      const material = new THREE.MeshBasicMaterial({
        color: 0xff0000,
        transparent: true,
        opacity: 0.7,
        blending: THREE.AdditiveBlending
      });
      
      const bodyGeometry = new THREE.BoxGeometry(1.5, 3, 1);
      const bodyMesh = new THREE.Mesh(bodyGeometry, material);
      
      const headGeometry = new THREE.SphereGeometry(1, 16, 16);
      const headMesh = new THREE.Mesh(headGeometry, material);
      headMesh.position.y = 2.5;

      threatFigure.add(bodyMesh, headMesh);
      threatFigure.position.set(threatPosition.x, threatPosition.y, threatPosition.z);
      threatHeatmapRef.current = threatFigure;
      scene.add(threatFigure); // Add to the scene
    }
  }, [threatPosition]);

  const handleAddMember = () => {
    if (newMemberName.trim() !== '' && !members.includes(newMemberName.trim())) {
      setMembers([...members, newMemberName.trim()]);
      setNewMemberName('');
    }
  };

  const handleArm = () => {
    setAuthStep(1);
  };

  const handleAuthProgress = (step) => {
    if (step < 3) {
      setAuthStep(step + 1);
    } else {
      setAuthStep(0); // Close dialog
      setSystemArmed(true);
      setThreatPosition(null);
    }
  };

  const handleDisarm = () => {
    setSystemArmed(false);
    setThreatPosition(null);
  };

  return (
    <div className="bg-gradient-to-br from-[#0a0a0a] to-[#1a1a1a] min-h-screen text-white font-inter p-6 flex flex-col items-center justify-center">
      <div className="w-full max-w-6xl bg-gray-900/50 backdrop-blur-sm rounded-3xl shadow-2xl border border-gray-800 flex flex-col md:flex-row">

        {/* Left Side: System Controls & Status */}
        <div className="w-full md:w-1/3 flex flex-col p-8 space-y-8 border-b md:border-b-0 md:border-r border-gray-700">
          <div className="flex flex-col items-start space-y-2">
            <h1 className="text-4xl font-extrabold tracking-tight bg-gradient-to-r from-blue-400 to-purple-400 text-transparent bg-clip-text">
              SecureWave
            </h1>
            <p className="text-sm text-gray-400">Localized Threat Detection & Control</p>
          </div>

          {/* System Status */}
          <div className="bg-gray-800 p-6 rounded-2xl border border-gray-700 shadow-inner">
            <h2 className="text-xl font-bold mb-4 flex items-center">
              <span className="w-3 h-3 rounded-full bg-green-500 mr-2 animate-pulse" />
              System Status
            </h2>
            <div className="space-y-4">
              <div>
                <p className="text-gray-400 text-sm">Resilience</p>
                <div className="w-full bg-gray-700 rounded-full h-2.5">
                  <div className="bg-purple-500 h-2.5 rounded-full" style={{ width: `${batteryLevel}%` }}></div>
                </div>
                <p className="text-right text-xs mt-1 text-gray-500">{batteryLevel}% Battery Backup</p>
              </div>
              <div>
                <p className="text-gray-400 text-sm">Network</p>
                <div className="flex items-center space-x-2 mt-1">
                  <div className={`w-3 h-3 rounded-full ${networkStatus === 'Online' ? 'bg-green-500' : 'bg-yellow-500'} animate-pulse`} />
                  <span className="text-sm">{networkStatus}</span>
                </div>
              </div>
              <div>
                <p className="text-gray-400 text-sm">Sensors</p>
                <div className="text-lg font-bold mt-1">{activeSensors} Active Sensors</div>
              </div>
            </div>
          </div>

          {/* Controls */}
          <div className="bg-gray-800 p-6 rounded-2xl border border-gray-700 shadow-inner">
            <h2 className="text-xl font-bold mb-4">Command Center</h2>
            <div className="space-y-4">
              <button
                onClick={systemArmed ? handleDisarm : handleArm}
                className={`w-full p-4 rounded-xl font-semibold transition-all duration-300 ${systemArmed ? 'bg-red-600 hover:bg-red-700' : 'bg-green-600 hover:bg-green-700'} shadow-lg`}
              >
                {systemArmed ? 'Disarm System' : 'Arm System'}
              </button>
              <button
                disabled={!systemArmed}
                className={`w-full p-4 rounded-xl font-semibold transition-all duration-300 ${systemArmed ? 'bg-blue-600 hover:bg-blue-700' : 'bg-gray-500 cursor-not-allowed'} shadow-lg`}
              >
                Click 3D View to Place Threat
              </button>
              <button
                className="w-full p-4 rounded-xl font-semibold transition-all duration-300 bg-gray-600 hover:bg-gray-700 shadow-lg"
              >
                Enter Diagnostics
              </button>
            </div>
          </div>

          {/* Authorized Personnel */}
          <div className="bg-gray-800 p-6 rounded-2xl border border-gray-700 shadow-inner">
            <h2 className="text-xl font-bold mb-4">Authorized Personnel</h2>
            <div className="flex space-x-2 mb-4">
              <input
                type="text"
                value={newMemberName}
                onChange={(e) => setNewMemberName(e.target.value)}
                placeholder="New member name..."
                className="flex-grow p-2 rounded-lg bg-gray-700 border border-gray-600 placeholder-gray-400 focus:outline-none focus:ring focus:ring-purple-500"
              />
              <button
                onClick={handleAddMember}
                className="p-2 rounded-lg bg-purple-600 hover:bg-purple-700 transition-colors"
              >
                Add
              </button>
            </div>
            <ul className="space-y-2 text-sm text-gray-400">
              {members.map((member, index) => (
                <li key={index} className="flex items-center space-x-2">
                  <span className="w-2 h-2 rounded-full bg-green-500"></span>
                  <span>{member}</span>
                </li>
              ))}
            </ul>
          </div>
        </div>

        {/* Right Side: 3D Visualization */}
        <div className="w-full md:w-2/3 p-4 flex items-center justify-center relative">
          <div className="absolute inset-0 z-0 opacity-10" style={{
            backgroundImage: `repeating-linear-gradient(0deg, #1f2937 1px, transparent 1px), repeating-linear-gradient(90deg, #1f2937 1px, transparent 1px)`,
            backgroundSize: `20px 20px`
          }}></div>
          <div
            ref={mountRef}
            className="w-full h-full rounded-2xl border border-gray-800 relative z-10"
            style={{ minHeight: '300px' }}
          >
            {/* 3D Canvas will be rendered here */}
            {threatPosition && (
              <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                <div className="text-white text-center p-4 bg-red-600/50 backdrop-blur-sm rounded-lg animate-pulse z-20">
                  <p className="text-sm font-bold">THREAT DETECTED!</p>
                  <p className="text-xs mt-1">Location mapped on floor plan.</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Authentication Modal */}
      <Dialog open={authStep > 0} onOpenChange={() => setAuthStep(0)}>
        <DialogContent className="fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm">
          <VisuallyHidden.Root>
            <DialogTitle>Multi-Factor Authentication</DialogTitle>
          </VisuallyHidden.Root>
          <div className="bg-gray-900 p-8 rounded-2xl border border-gray-700 shadow-lg min-w-[350px]">
            <h2 className="text-2xl font-bold mb-4 text-center">Multi-Factor Authentication</h2>
            {authStep === 1 && (
              <div className="text-center">
                <p className="text-gray-400 mb-4">1. Insert Physical Key</p>
                <button
                  onClick={() => handleAuthProgress(1)}
                  className="w-full p-4 rounded-xl font-semibold bg-gray-700 hover:bg-gray-600 transition-colors"
                >
                  <span className="mr-2">🔑</span> Verify Key
                </button>
              </div>
            )}
            {authStep === 2 && (
              <div className="text-center">
                <p className="text-gray-400 mb-4">2. Scan RFID Card</p>
                <button
                  onClick={() => handleAuthProgress(2)}
                  className="w-full p-4 rounded-xl font-semibold bg-gray-700 hover:bg-gray-600 transition-colors"
                >
                  <span className="mr-2">💳</span> Scan RFID
                </button>
              </div>
            )}
            {authStep === 3 && (
              <div className="text-center">
                <p className="text-gray-400 mb-4">3. Place Finger on Scanner</p>
                <button
                  onClick={() => handleAuthProgress(3)}
                  className="w-full p-4 rounded-xl font-semibold bg-gray-700 hover:bg-gray-600 transition-colors"
                >
                  <span className="mr-2 text-xl">🫳</span> Scan Fingerprint
                </button>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default App;
