<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SecureWave UI</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Share+Tech+Mono&display=swap');
        
        :root {
            --primary-color: #0d1117;
            --accent-color: #00ffc8;
            --secondary-accent: #ff00ff;
            --danger-color: #ff3333;
            --glow-color: #00ffc8;
            --danger-glow: #ff3333;
        }

        body {
            font-family: 'Share Tech Mono', monospace;
            background-color: var(--primary-color);
            color: #ffffff;
            /* Allow content to scroll */
            overflow: auto;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 1rem;
        }

        .scanline-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            background: linear-gradient(
                rgba(0,0,0,0.1) 50%,
                rgba(0,0,0,0.2) 50%
            );
            background-size: 100% 4px;
            animation: scanline 8s infinite linear;
        }

        .crt-vignette {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            box-shadow: inset 0 0 100px rgba(0,0,0,0.7);
        }

        .ui-container {
            width: 100%;
            max-width: 1200px;
            /* Allow container to grow vertically */
            height: auto;
            max-height: none;
            background-color: rgba(13, 17, 23, 0.7);
            backdrop-filter: blur(10px);
            border: 2px solid var(--accent-color);
            box-shadow: 0 0 30px var(--accent-color);
            border-radius: 20px;
            display: grid;
            grid-template-areas:
                "header header"
                "main sidebar";
            grid-template-rows: auto 1fr;
            grid-template-columns: 3fr 1fr;
            gap: 1rem;
            padding: 1rem;
            position: relative;
            animation: pulse-glow 5s infinite ease-in-out;
            min-height: 90vh;
        }

        .header {
            grid-area: header;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 1rem;
            border-bottom: 2px dashed rgba(0, 255, 200, 0.2);
        }

        .main-content {
            grid-area: main;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .sidebar {
            grid-area: sidebar;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .card {
            background-color: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 1rem;
            box-shadow: 0 0 15px rgba(0, 255, 200, 0.1);
            transition: transform 0.3s ease-in-out;
        }

        .card:hover {
            transform: translateY(-5px) scale(1.02);
            box-shadow: 0 0 25px rgba(0, 255, 200, 0.3);
        }

        .title {
            text-shadow: 0 0 10px var(--accent-color);
        }

        .text-glow {
            text-shadow: 0 0 5px var(--glow-color), 0 0 15px var(--glow-color);
            animation: text-pulse 2s infinite ease-in-out;
        }

        .danger-glow {
            text-shadow: 0 0 5px var(--danger-glow), 0 0 15px var(--danger-glow);
            animation: text-pulse 1s infinite ease-in-out;
        }

        #floor-plan-canvas {
            background-color: rgba(0, 0, 0, 0.5);
            border: 1px solid var(--accent-color);
            border-radius: 10px;
            width: 100%;
            height: 100%;
            cursor: crosshair;
        }

        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(5px);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 100;
        }

        .modal {
            background-color: var(--primary-color);
            border: 2px solid var(--secondary-accent);
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 0 40px var(--secondary-accent);
            animation: modal-glow 3s infinite ease-in-out;
        }

        .button {
            background-color: rgba(0, 255, 200, 0.2);
            border: 1px solid var(--accent-color);
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease-in-out;
        }
        
        .button:hover {
            background-color: rgba(0, 255, 200, 0.4);
            box-shadow: 0 0 10px var(--accent-color);
        }
        
        .threat-list {
            list-style: none;
            padding: 0;
        }

        .threat-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem;
            background-color: rgba(255, 51, 51, 0.1);
            border-radius: 5px;
            margin-bottom: 0.5rem;
            border: 1px solid var(--danger-color);
            animation: danger-pulse 1s infinite ease-in-out;
        }

        /* Keyframe Animations */
        @keyframes pulse-glow {
            0% { box-shadow: 0 0 30px var(--accent-color); }
            50% { box-shadow: 0 0 50px var(--accent-color); }
            100% { box-shadow: 0 0 30px var(--accent-color); }
        }

        @keyframes text-pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }

        @keyframes danger-pulse {
            0%, 100% { background-color: rgba(255, 51, 51, 0.1); }
            50% { background-color: rgba(255, 51, 51, 0.3); }
        }

        @keyframes modal-glow {
            0% { box-shadow: 0 0 40px var(--secondary-accent); }
            50% { box-shadow: 0 0 60px var(--secondary-accent); }
            100% { box-shadow: 0 0 40px var(--secondary-accent); }
        }

        @keyframes scanline {
            0% { background-position: 0 0; }
            100% { background-position: 0 100%; }
        }
    </style>
</head>
<body>

    <div class="scanline-overlay"></div>
    <div class="crt-vignette"></div>

    <div class="ui-container">
        <!-- Header -->
        <div class="header">
            <div class="flex items-center">
                <h1 class="text-4xl font-bold title">SecureWave</h1>
                <span class="ml-4 text-xs tracking-widest text-gray-400">Localized Threat Defense Suite</span>
            </div>
            <div id="resilience-status" class="flex items-center gap-4 text-sm">
                <div class="flex items-center gap-2">
                    <span class="text-xs text-green-400">‚óè</span>
                    <span>12h Battery</span>
                </div>
                <div class="flex items-center gap-2">
                    <span class="text-xs text-green-400">‚óè</span>
                    <span>Wireless Failover: OK</span>
                </div>
            </div>
        </div>

        <!-- Main Content Area -->
        <div class="main-content">
            <!-- Offline Threat Visualization -->
            <div class="card flex-grow p-4 relative">
                <div class="absolute top-2 left-2 text-xl text-glow">
                    Threat Visualization - Offline
                </div>
                <div class="absolute top-2 right-2 text-xs">
                    <span id="threat-count">0</span> Threats Detected
                </div>
                <canvas id="floor-plan-canvas" class="mt-8"></canvas>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="sidebar">
            <!-- See-Through Detection Status -->
            <div class="card p-4">
                <div class="text-xl text-glow mb-2">See-Through Detection</div>
                <div class="flex flex-col items-center justify-center h-24">
                    <div id="detection-status" class="text-green-400 text-3xl animate-pulse">
                        <span class="mr-2">ARMED</span>
                    </div>
                    <div class="text-xs text-gray-400 mt-2">mmWave Field Active</div>
                </div>
            </div>

            <!-- Multifactor Secure Control -->
            <div class="card p-4">
                <div class="text-xl text-glow mb-2">Secure Control</div>
                <p class="text-xs text-gray-400 mb-4">Access Control Panel</p>
                <div class="flex flex-col gap-4">
                    <button id="auth-button" class="button" onclick="toggleSystem()">
                        <span class="text-sm">DISARM SYSTEM</span>
                    </button>
                    <div class="flex items-center justify-between mt-2 text-xs text-gray-400">
                        <span>Key Status: <span class="text-green-400">ONLINE</span></span>
                        <span>RFID Reader: <span class="text-green-400">READY</span></span>
                    </div>
                    <div class="flex items-center justify-center mt-2">
                        <span class="text-green-400 text-3xl">üéöÔ∏è</span>
                        <span class="text-green-400 text-3xl ml-4">üí≥</span>
                        <span class="text-green-400 text-3xl ml-4">üëÜ</span>
                    </div>
                </div>
            </div>

            <!-- Threat List -->
            <div class="card p-4 flex-grow overflow-y-auto">
                <div class="text-xl text-glow mb-2">Threat Log</div>
                <ul id="threat-log-list" class="threat-list text-xs">
                    <!-- Threat items will be added here by JS -->
                    <li class="flex items-center justify-center h-full text-gray-500">
                        No active threats.
                    </li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Multifactor Authentication Modal -->
    <div id="auth-modal" class="modal-overlay">
        <div class="modal w-11/12 md:w-1/2 lg:w-1/3 text-center">
            <div class="text-2xl text-secondary-accent mb-6 animate-pulse">
                ACCESS PROTOCOL
            </div>
            <p class="text-lg mb-8">
                Verify Identity for <span class="text-secondary-accent">Secure Control</span>
            </p>
            <div class="flex flex-col gap-4">
                <div class="p-4 border border-gray-700 rounded-lg">
                    <div class="text-xl text-gray-400 mb-2">Key Acknowledgment</div>
                    <p class="text-sm text-green-400">STATUS: VERIFIED</p>
                </div>
                <div class="p-4 border border-gray-700 rounded-lg">
                    <div class="text-xl text-gray-400 mb-2">RFID Scan</div>
                    <p class="text-sm text-yellow-400">STATUS: AWAITING SCAN...</p>
                </div>
                <div class="p-4 border border-gray-700 rounded-lg">
                    <div class="text-xl text-gray-400 mb-2">Biometric Lock</div>
                    <p class="text-sm text-red-400">STATUS: AWAITING FINGERPRINT...</p>
                </div>
            </div>
            <button class="button mt-8" onclick="hideAuthModal()">
                <span class="text-sm">Cancel Authentication</span>
            </button>
        </div>
    </div>

    <script>
        // UI Interaction Functions
        function showAuthModal() {
            document.getElementById('auth-modal').style.display = 'flex';
        }
        function hideAuthModal() {
            document.getElementById('auth-modal').style.display = 'none';
        }

        // Canvas and Animation Logic
        const canvas = document.getElementById('floor-plan-canvas');
        const ctx = canvas.getContext('2d');
        const threatLogList = document.getElementById('threat-log-list');
        const threatCountEl = document.getElementById('threat-count');
        const detectionStatusEl = document.getElementById('detection-status');
        const authButton = document.getElementById('auth-button');

        let threats = [];
        let roomWalls = [];
        let doorWalls = [];
        let systemArmed = true;

        // Function to set canvas size and draw everything
        function resizeCanvas() {
            canvas.width = canvas.offsetWidth;
            canvas.height = canvas.offsetHeight;
            drawUI();
        }

        // --- Drawing functions ---
        function drawWalls(walls, color, lineWidth) {
            ctx.beginPath();
            ctx.strokeStyle = color;
            ctx.lineWidth = lineWidth;
            walls.forEach(wall => {
                ctx.moveTo(wall.x1, wall.y1);
                ctx.lineTo(wall.x2, wall.y2);
            });
            ctx.stroke();
        }
        
        function drawThreats() {
            threats.forEach(threat => {
                ctx.beginPath();
                const radius = 10 + Math.sin(Date.now() / 200) * 5; // Pulsing effect
                ctx.arc(threat.x, threat.y, radius, 0, 2 * Math.PI);
                ctx.fillStyle = threat.color;
                ctx.shadowColor = threat.color;
                ctx.shadowBlur = 20;
                ctx.fill();
                ctx.shadowBlur = 0;

                // Draw threat info
                ctx.fillStyle = '#ffffff';
                ctx.font = '10px Share Tech Mono';
                ctx.fillText(`THREAT ID: ${threat.id}`, threat.x + 15, threat.y);
            });
        }
        
        function drawUI() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawWalls(roomWalls, 'rgba(0, 255, 200, 0.5)', 2);
            drawWalls(doorWalls, 'rgba(255, 255, 255, 0.7)', 4);
            drawThreats();
        }
        
        // --- Floor Plan and Threat Simulation ---
        function setupFloorPlan() {
            // Simple office floor plan as lines
            const scale = Math.min(canvas.width, canvas.height) / 1000;
            const offsetX = (canvas.width - 800 * scale) / 2;
            const offsetY = (canvas.height - 600 * scale) / 2;
            
            roomWalls = [
                // Outer walls
                { x1: 100, y1: 100, x2: 700, y2: 100 },
                { x1: 700, y1: 100, x2: 700, y2: 500 },
                { x1: 700, y1: 500, x2: 100, y2: 500 },
                { x1: 100, y1: 500, x2: 100, y2: 100 },

                // Inner walls
                { x1: 300, y1: 100, x2: 300, y2: 350 },
                { x1: 500, y1: 100, x2: 500, y2: 350 },
                { x1: 300, y1: 350, x2: 500, y2: 350 },
            ].map(w => ({
                x1: w.x1 * scale + offsetX, y1: w.y1 * scale + offsetY,
                x2: w.x2 * scale + offsetX, y2: w.y2 * scale + offsetY
            }));

            doorWalls = [
                { x1: 100, y1: 300, x2: 100, y2: 300 }, // No door on outer wall
                { x1: 300, y1: 250, x2: 300, y2: 250 },
                { x1: 500, y1: 250, x2: 500, y2: 250 },
                { x1: 400, y1: 350, x2: 400, y2: 350 }
            ].map(w => ({
                x1: w.x1 * scale + offsetX, y1: w.y1 * scale + offsetY,
                x2: w.x2 * scale + offsetX, y2: w.y2 * scale + offsetY
            }));
        }

        function clearThreats() {
            threats = [];
            updateThreatLog();
        }

        function updateThreatLog() {
            threatLogList.innerHTML = '';
            if (threats.length === 0) {
                threatLogList.innerHTML = `<li class="flex items-center justify-center h-full text-gray-500">
                    No active threats.
                </li>`;
            } else {
                threats.forEach(threat => {
                    const listItem = document.createElement('li');
                    listItem.className = 'threat-item';
                    listItem.innerHTML = `
                        <span class="danger-glow text-xl">‚ö†Ô∏è</span>
                        <div>
                            <span class="text-red-400">Alert: ${threat.type}</span><br>
                            <span class="text-xs text-gray-400">ID: ${threat.id} | Coords: ${threat.x.toFixed(0)}, ${threat.y.toFixed(0)}</span>
                        </div>
                    `;
                    threatLogList.appendChild(listItem);
                });
            }
            threatCountEl.textContent = threats.length;
        }

        function addThreat(event) {
            if (!systemArmed) {
                return;
            }
            const rect = canvas.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;
            
            const id = Math.random().toString(36).substring(7);
            const color = 'rgba(255, 51, 51, 0.7)'; // Red
            const type = 'Human Presence';

            threats.push({ id, x, y, color, type });
            updateThreatLog();
        }

        function toggleSystem() {
            if (systemArmed) {
                // Disarm
                showAuthModal();
                authButton.textContent = "ARM SYSTEM";
                detectionStatusEl.textContent = "DISARMED";
                detectionStatusEl.classList.remove('text-green-400', 'animate-pulse');
                detectionStatusEl.classList.add('text-yellow-400');
                clearThreats();
                systemArmed = false;
            } else {
                // Arm
                authButton.textContent = "DISARM SYSTEM";
                detectionStatusEl.textContent = "ARMED";
                detectionStatusEl.classList.remove('text-yellow-400');
                detectionStatusEl.classList.add('text-green-400', 'animate-pulse');
                systemArmed = true;
            }
        }

        // Animation Loop
        function animate() {
            drawUI();
            requestAnimationFrame(animate);
        }
        
        // Initial setup and event listeners
        window.addEventListener('resize', () => {
            resizeCanvas();
            setupFloorPlan();
        });

        window.onload = () => {
            resizeCanvas();
            setupFloorPlan();
            animate();
            
            // Add click listener for threat placement
            canvas.addEventListener('click', addThreat);
        };
    </script>
</body>
</html>
